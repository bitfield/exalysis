// Code generated by go-bindata. DO NOT EDIT.
// sources:
// concat-not-needed.md (161B)
// extensive-for-loop.md (172B)
// itoa.md (88B)
// many-loops.md (146B)
// plus-equal.md (59B)
// strings-builder.md (251B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _concatNotNeededMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x41\x92\x82\x30\x10\x05\xd0\xfd\x9c\xe2\xef\xa7\xe4\x06\x1c\xc0\x23\xb8\x4b\x93\x7c\x20\x1a\xd2\x54\xa7\xa3\x95\xdb\x5b\xb8\x7f\xef\x86\x87\x76\x44\xed\x25\x21\xee\x8c\x2f\x0c\xed\x86\xde\x64\x23\x74\x45\xf8\x9f\x03\x72\x85\x71\x13\x4b\x0d\xae\xf8\xec\x34\x22\x3b\x72\x83\x51\x4a\x19\xa8\x64\x62\x9a\x70\x5f\xe1\x3b\xe1\x62\x1b\x1d\x6f\xb1\x2c\x4b\xe1\x05\xff\x62\x37\x63\xf5\x32\xc0\xe3\xf4\x01\x41\xcb\xc7\x59\x88\x30\x07\x24\x65\xfb\xcd\xa7\x2e\x90\x9a\xae\xb1\x4a\x73\xda\xf4\x0d\x00\x00\xff\xff\x9b\x5e\x63\x6f\xa1\x00\x00\x00")

func concatNotNeededMdBytes() ([]byte, error) {
	return bindataRead(
		_concatNotNeededMd,
		"concat-not-needed.md",
	)
}

func concatNotNeededMd() (*asset, error) {
	bytes, err := concatNotNeededMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "concat-not-needed.md", size: 161, mode: os.FileMode(420), modTime: time.Unix(1540127477, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xa5, 0xaa, 0xb6, 0xc3, 0xfd, 0x9a, 0xb9, 0x64, 0xd5, 0xe5, 0x1, 0xa6, 0x4b, 0x17, 0x5d, 0x34, 0xc7, 0x30, 0xec, 0xd6, 0xd8, 0x3e, 0xf1, 0x1b, 0x87, 0x7a, 0xae, 0x5b, 0x3d, 0x3c, 0xc1}}
	return a, nil
}

var _extensiveForLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\x9d\x53\xbc\x03\x00\x0b\x42\x8c\x1d\x98\xb8\x85\x4d\x31\x6d\xa4\xd4\xae\xec\xa4\x55\x6e\x8f\x1a\x89\xd1\xbf\xf5\xbe\x0b\x5e\x08\x11\x34\xab\x60\x17\xd4\x48\x3a\x81\x41\x5f\x73\x42\x36\x5b\xe1\x55\xb5\xc7\x9c\x51\x66\xc1\xce\x0d\x75\x45\xb1\x7e\x4d\x69\x13\x85\xd6\xe5\x2d\x7e\xc5\x93\xb5\x53\x69\x59\xdd\x36\x81\x29\xca\xcc\x65\x38\xfd\x1f\xbb\xa7\x72\x64\x39\xf6\x9d\x37\xcd\xad\x4b\x2a\xa3\x44\xb0\x37\x8c\x1c\x12\xa0\x1b\x9d\x41\x77\x02\xeb\x07\xf4\xa0\xe1\x17\x00\x00\xff\xff\xcc\x9a\x75\x60\xac\x00\x00\x00")

func extensiveForLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_extensiveForLoopMd,
		"extensive-for-loop.md",
	)
}

func extensiveForLoopMd() (*asset, error) {
	bytes, err := extensiveForLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extensive-for-loop.md", size: 172, mode: os.FileMode(420), modTime: time.Unix(1540128566, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x1a, 0xca, 0x94, 0x64, 0x2, 0x34, 0x83, 0x5e, 0xfc, 0x28, 0x8a, 0xb4, 0x97, 0x6e, 0x3, 0xdb, 0xb0, 0x70, 0x57, 0x3f, 0xca, 0x91, 0xb6, 0x67, 0x71, 0xb5, 0xc7, 0x41, 0x88, 0x22, 0x63}}
	return a, nil
}

var _itoaMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcb\xd1\x09\xc2\x40\x10\x04\xd0\x56\xa6\x01\x53\x87\x76\xb1\x43\x4c\x74\xd1\xec\xc0\x66\x38\xb1\xfb\x70\xbf\x0f\xde\x0d\x77\x8e\x0d\xc4\x57\xfa\x80\x46\x9c\xee\x55\x35\x96\x87\xc5\xc0\xae\x86\xdf\x1b\xf2\x99\x3a\xe8\x5c\xf1\xe3\x1f\x16\xdc\xac\x73\x57\x1f\x60\x21\xb2\x1c\x53\xe7\xce\x7a\xc5\x72\x05\x00\x00\xff\xff\x6a\xd0\x65\x71\x58\x00\x00\x00")

func itoaMdBytes() ([]byte, error) {
	return bindataRead(
		_itoaMd,
		"itoa.md",
	)
}

func itoaMd() (*asset, error) {
	bytes, err := itoaMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "itoa.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1540127927, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xf7, 0xe0, 0x3, 0xe6, 0xf8, 0xe1, 0xef, 0x9c, 0xe4, 0x48, 0x3f, 0x87, 0x61, 0xb3, 0xba, 0x9a, 0x5e, 0x6f, 0x40, 0xfb, 0x29, 0xd8, 0x6e, 0x94, 0x77, 0x26, 0xd7, 0x25, 0xca, 0x27, 0xa6}}
	return a, nil
}

var _manyLoopsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xc1\xad\x83\x40\x0c\x84\xe1\xfb\xab\x62\x1a\x78\xb4\x90\x03\x2d\xa4\x01\x47\x2c\x60\xc5\x78\xd0\xda\x16\xa2\xfb\x28\x7b\xc8\x71\x46\x9f\xfe\x7f\xcc\x5c\xd4\x37\x68\x40\x60\x4c\xc8\x8b\x95\x58\xd5\xc7\x2d\x08\x3d\x4e\x6b\x08\x5a\xa5\xd2\x27\x3c\x77\x8d\xdf\x44\x45\x0b\x1c\x65\xa9\x5f\x65\xe4\x19\x13\x66\x71\xdc\x2c\x64\xbf\x21\xbe\xe0\x62\x7f\xe3\xef\xd2\xdc\x47\xd0\x37\x6b\x58\xd9\x07\x07\x3b\x9c\xde\x20\x09\x31\x7b\x7c\x02\x00\x00\xff\xff\x31\x8f\x37\xf5\x92\x00\x00\x00")

func manyLoopsMdBytes() ([]byte, error) {
	return bindataRead(
		_manyLoopsMd,
		"many-loops.md",
	)
}

func manyLoopsMd() (*asset, error) {
	bytes, err := manyLoopsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "many-loops.md", size: 146, mode: os.FileMode(420), modTime: time.Unix(1539184320, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x1f, 0x5b, 0xd7, 0xf4, 0xb2, 0xe, 0x23, 0x8, 0x59, 0x56, 0xba, 0x80, 0xba, 0xc8, 0xfc, 0x4a, 0xda, 0x52, 0xad, 0xee, 0x92, 0x2d, 0xea, 0x3a, 0x6, 0xe0, 0x4b, 0xa8, 0x3c, 0x4d, 0x6e}}
	return a, nil
}

var _plusEqualMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x55\x70\xc9\x4c\x51\xa8\xcc\x2f\x55\xc8\xce\xcb\x2f\xb7\x52\x48\xcf\x57\x28\x2e\x2d\x28\xc8\x2f\x2a\x29\x56\x28\xc9\x48\x55\x48\x28\x2e\x48\x4d\x4d\xce\x50\xd0\xb6\x55\x50\x0a\xc8\x49\xcc\x4b\x57\x4a\x50\x28\xae\xcc\x2b\x49\xac\xd0\x03\x04\x00\x00\xff\xff\x9e\x43\x35\xee\x3b\x00\x00\x00")

func plusEqualMdBytes() ([]byte, error) {
	return bindataRead(
		_plusEqualMd,
		"plus-equal.md",
	)
}

func plusEqualMd() (*asset, error) {
	bytes, err := plusEqualMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plus-equal.md", size: 59, mode: os.FileMode(420), modTime: time.Unix(1540127233, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xff, 0x90, 0xf5, 0x14, 0xc3, 0x56, 0xc5, 0x52, 0x26, 0x40, 0xf6, 0x6b, 0xf4, 0x9a, 0xd0, 0x49, 0x11, 0xdd, 0xf, 0x3a, 0xff, 0xee, 0x91, 0x4, 0xf6, 0xd5, 0xa4, 0x33, 0x69, 0x63, 0xc0}}
	return a, nil
}

var _stringsBuilderMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\xbd\x4e\xc4\x40\x0c\x84\xfb\x7b\x8a\xe9\x11\x5b\x20\x51\xd2\xd0\xdd\x23\xd0\xad\xb3\xf1\x5d\xac\xdb\x1f\xc9\xe3\x45\xa4\xe1\xd9\x51\x82\xa0\x73\xe1\xef\x9b\x99\x67\x5c\x41\x55\xec\x63\x42\x5c\x31\x69\xfd\x0e\x41\x66\xb8\xf5\x3b\xd3\xfb\xb4\xba\xaa\xe7\x84\x6b\x47\x6c\x46\xe8\x97\x7a\x31\x2a\x62\x93\x38\xe0\x46\x08\x16\x0b\x8c\x4f\xf5\x87\xd5\x0a\xe9\x2b\xf2\xd3\x5b\x86\x94\x98\x52\xeb\x8e\x4b\x19\x9d\xb3\x29\xf1\xfd\x92\x5e\x11\x76\x9c\x55\x49\x34\x6d\xc3\xf7\x13\xb1\x3f\xd1\x4d\x18\xea\x09\x1f\x63\xa2\x48\x87\xcf\x23\x5b\x91\x17\xed\x65\x6b\xe2\x0f\x66\x08\xb1\x2a\x8b\xdb\xa2\x2b\xec\xf7\xe1\xf2\x5f\xce\x3a\xc3\x67\x09\x1b\x9d\xa7\x3c\x7c\x87\xc5\x31\xd4\xa9\xf5\x96\xf0\x13\x00\x00\xff\xff\xe3\x47\xf0\xa4\xfb\x00\x00\x00")

func stringsBuilderMdBytes() ([]byte, error) {
	return bindataRead(
		_stringsBuilderMd,
		"strings-builder.md",
	)
}

func stringsBuilderMd() (*asset, error) {
	bytes, err := stringsBuilderMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "strings-builder.md", size: 251, mode: os.FileMode(420), modTime: time.Unix(1539184320, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xb4, 0xb4, 0x9a, 0xe9, 0x90, 0x6d, 0xe3, 0x6d, 0x4c, 0x2f, 0x5c, 0xf9, 0x6e, 0x68, 0x92, 0x55, 0x96, 0x95, 0x9b, 0xe4, 0xf0, 0x5b, 0x50, 0x76, 0x28, 0xcb, 0x83, 0x35, 0xca, 0x19, 0xa8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"concat-not-needed.md": concatNotNeededMd,

	"extensive-for-loop.md": extensiveForLoopMd,

	"itoa.md": itoaMd,

	"many-loops.md": manyLoopsMd,

	"plus-equal.md": plusEqualMd,

	"strings-builder.md": stringsBuilderMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"concat-not-needed.md":  &bintree{concatNotNeededMd, map[string]*bintree{}},
	"extensive-for-loop.md": &bintree{extensiveForLoopMd, map[string]*bintree{}},
	"itoa.md":               &bintree{itoaMd, map[string]*bintree{}},
	"many-loops.md":         &bintree{manyLoopsMd, map[string]*bintree{}},
	"plus-equal.md":         &bintree{plusEqualMd, map[string]*bintree{}},
	"strings-builder.md":    &bintree{stringsBuilderMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
