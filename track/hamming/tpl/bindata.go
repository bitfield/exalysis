// Code generated by go-bindata. DO NOT EDIT.
// sources:
// error-message-format.md (262B)
// rune-to-byte.md (269B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errorMessageFormatMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8f\xb1\x6a\xf4\x40\x0c\x84\x7b\x3f\xc5\xc0\xdf\xfc\x29\xce\xdb\xa7\x3d\x08\xa4\x4d\x1b\x52\x28\x6b\x79\x57\x9c\x57\x32\x5a\xf9\x4c\xf2\xf4\xc1\xc6\xa5\xf8\x34\x7c\x33\x37\xbc\x2b\x8a\x81\xdd\xcd\xd1\xc3\x45\x4b\x07\x39\xc3\xe6\x60\x45\x36\xcd\x14\xac\x14\x3c\x21\x0c\xd9\x99\x82\x41\xe8\xe6\x01\x9b\xaf\x60\x38\xc9\x72\xf0\x87\xda\x8e\xbd\xb2\x33\x48\x2f\x98\xa9\x31\x66\xb7\x36\x0e\x6f\xc7\x6f\x95\x0e\x67\xea\xa6\x90\xc0\x79\x64\x6b\x8d\x75\x3a\x1c\x95\x7f\x4e\xff\xf0\xa9\x16\xc8\xb4\x4a\xd0\x22\xbf\x3c\xc1\x1c\x95\x9e\x8c\x75\xd3\x1c\x1b\x85\x98\x7e\xfd\xaf\x11\x6b\x7f\x4d\xa9\x48\xd4\xed\x7b\xcc\xd6\x52\xb1\x85\xb4\xa4\x62\x69\x97\x87\xa4\xbb\x4d\xfc\xc1\x4f\xe1\xfd\x7e\x5a\xa2\xff\x3b\x7b\xdd\xae\xb5\x2f\xe3\xf0\x17\x00\x00\xff\xff\xf6\x89\xd5\x7d\x06\x01\x00\x00")

func errorMessageFormatMdBytes() ([]byte, error) {
	return bindataRead(
		_errorMessageFormatMd,
		"error-message-format.md",
	)
}

func errorMessageFormatMd() (*asset, error) {
	bytes, err := errorMessageFormatMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error-message-format.md", size: 262, mode: os.FileMode(420), modTime: time.Unix(1538559089, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xe0, 0xcb, 0x58, 0xdb, 0xc, 0xda, 0xae, 0x12, 0xf, 0x22, 0xa3, 0xf5, 0x1e, 0x4f, 0x84, 0x3c, 0xd9, 0xbe, 0x9d, 0xe0, 0x27, 0x8a, 0xb5, 0xf5, 0xc3, 0x56, 0x8e, 0xbc, 0xd7, 0xc3, 0x64}}
	return a, nil
}

var _runeToByteMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x31\x6e\xc3\x30\x0c\x45\xf7\x9c\xe2\x5f\xa0\x1e\xda\xa5\x6b\xef\xd0\xa5\x28\x0a\x88\x96\xe9\x98\x80\x40\x06\x24\xe5\xc0\xb7\x2f\x64\x78\xc9\xa6\xe1\xbd\xaf\xc7\x37\xfc\x58\x07\x39\xa3\x76\x77\xd6\x6c\x07\xaa\xe9\xce\x9e\xa2\x77\x10\x8a\x77\xe5\x82\xb4\xf1\x9e\x8f\xe4\x32\xe1\x7b\x93\xb8\xa8\x10\x53\x48\xa0\x59\xc4\x01\x59\xf1\x64\x6c\xb4\xf3\x10\x16\xa6\x86\xa7\xe4\x86\x5b\x3c\xb8\x0a\x35\xd4\x8d\x9c\x6a\xb2\xc7\x84\x2f\x8c\xe9\x21\x17\xd1\xfc\x78\x2f\x20\x8c\x0f\x60\xda\x0e\x94\x2e\x9a\x9f\x65\x3a\xfb\xaa\xf5\xb6\x40\x34\x92\x69\x41\x33\x7b\xc0\x76\xf6\x13\x0f\xcc\x2f\xc9\xb7\xdc\x18\x25\xd2\x45\xef\x57\x77\x34\xa9\x0c\x5b\x2f\xbe\xfc\xfe\x9d\x87\x60\xe6\xd5\x9c\x31\x84\xb1\x39\xfd\x07\x00\x00\xff\xff\xfc\x24\x8a\x05\x0d\x01\x00\x00")

func runeToByteMdBytes() ([]byte, error) {
	return bindataRead(
		_runeToByteMd,
		"rune-to-byte.md",
	)
}

func runeToByteMd() (*asset, error) {
	bytes, err := runeToByteMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rune-to-byte.md", size: 269, mode: os.FileMode(420), modTime: time.Unix(1538565384, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x64, 0x16, 0xac, 0xb7, 0xf7, 0xf3, 0xa8, 0x34, 0x1, 0xe9, 0xa9, 0xb, 0xa7, 0x97, 0x7e, 0x84, 0xcd, 0x98, 0x69, 0x26, 0xb3, 0x5, 0xec, 0x7b, 0xd2, 0x4e, 0xa4, 0xf8, 0xd9, 0x4c, 0x51}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"error-message-format.md": errorMessageFormatMd,

	"rune-to-byte.md": runeToByteMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"error-message-format.md": &bintree{errorMessageFormatMd, map[string]*bintree{}},
	"rune-to-byte.md":         &bintree{runeToByteMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
