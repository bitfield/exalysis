// Code generated by go-bindata. DO NOT EDIT.
// sources:
// error-message-format.md (262B)
// increase.md (56B)
// invert-if.md (184B)
// multiple-string-conversions.md (366B)
// rune-to-byte.md (442B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errorMessageFormatMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8f\xb1\x6a\xf4\x40\x0c\x84\x7b\x3f\xc5\xc0\xdf\xfc\x29\xce\xdb\xa7\x3d\x08\xa4\x4d\x1b\x52\x28\x6b\x79\x57\x9c\x57\x32\x5a\xf9\x4c\xf2\xf4\xc1\xc6\xa5\xf8\x34\x7c\x33\x37\xbc\x2b\x8a\x81\xdd\xcd\xd1\xc3\x45\x4b\x07\x39\xc3\xe6\x60\x45\x36\xcd\x14\xac\x14\x3c\x21\x0c\xd9\x99\x82\x41\xe8\xe6\x01\x9b\xaf\x60\x38\xc9\x72\xf0\x87\xda\x8e\xbd\xb2\x33\x48\x2f\x98\xa9\x31\x66\xb7\x36\x0e\x6f\xc7\x6f\x95\x0e\x67\xea\xa6\x90\xc0\x79\x64\x6b\x8d\x75\x3a\x1c\x95\x7f\x4e\xff\xf0\xa9\x16\xc8\xb4\x4a\xd0\x22\xbf\x3c\xc1\x1c\x95\x9e\x8c\x75\xd3\x1c\x1b\x85\x98\x7e\xfd\xaf\x11\x6b\x7f\x4d\xa9\x48\xd4\xed\x7b\xcc\xd6\x52\xb1\x85\xb4\xa4\x62\x69\x97\x87\xa4\xbb\x4d\xfc\xc1\x4f\xe1\xfd\x7e\x5a\xa2\xff\x3b\x7b\xdd\xae\xb5\x2f\xe3\xf0\x17\x00\x00\xff\xff\xf6\x89\xd5\x7d\x06\x01\x00\x00")

func errorMessageFormatMdBytes() ([]byte, error) {
	return bindataRead(
		_errorMessageFormatMd,
		"error-message-format.md",
	)
}

func errorMessageFormatMd() (*asset, error) {
	bytes, err := errorMessageFormatMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error-message-format.md", size: 262, mode: os.FileMode(420), modTime: time.Unix(1538572383, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xe0, 0xcb, 0x58, 0xdb, 0xc, 0xda, 0xae, 0x12, 0xf, 0x22, 0xa3, 0xf5, 0x1e, 0x4f, 0x84, 0x3c, 0xd9, 0xbe, 0x9d, 0xe0, 0x27, 0x8a, 0xb5, 0xf5, 0xc3, 0x56, 0x8e, 0xbc, 0xd7, 0xc3, 0x64}}
	return a, nil
}

var _increaseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x55\x08\xc9\x57\xc8\xcc\x4b\x2e\x4a\x4d\x2c\x4e\x55\x48\x54\xc8\x2b\xcd\x4d\x4a\x2d\x52\x70\xcf\x57\x28\x2e\x2d\x28\xc8\x2f\x2a\x29\x56\x28\xc9\x48\x55\x48\x48\xce\x2f\xcd\x2b\xd1\xd6\x4e\x50\x28\xae\xcc\x2b\x49\xac\xd0\x03\x04\x00\x00\xff\xff\x38\xcd\x5f\xc6\x38\x00\x00\x00")

func increaseMdBytes() ([]byte, error) {
	return bindataRead(
		_increaseMd,
		"increase.md",
	)
}

func increaseMd() (*asset, error) {
	bytes, err := increaseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "increase.md", size: 56, mode: os.FileMode(420), modTime: time.Unix(1538573739, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x73, 0xa1, 0x85, 0x4, 0xa, 0xf2, 0x64, 0x82, 0xfa, 0x8f, 0xf7, 0xe7, 0x75, 0x8e, 0x1d, 0xd7, 0xd8, 0x60, 0x92, 0x93, 0xb0, 0x7d, 0xb7, 0x5d, 0x99, 0x4, 0xc5, 0x62, 0x87, 0xea, 0xbb}}
	return a, nil
}

var _invertIfMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xd1\x0d\xc2\x30\x0c\x84\xe1\x77\xa6\xb8\x05\xe8\x34\x0c\x10\x27\xb9\x90\x88\xd6\x91\x6c\x07\xa9\xdb\xa3\x22\xf1\xc0\xf3\x9d\xfe\xef\x8e\x73\x2e\x14\x51\x1c\xf2\x22\xa2\x13\x6d\x69\x89\x31\x15\xc7\x34\xc2\x28\x55\xf2\x4e\xe4\x13\x43\xdf\xb4\x18\xfa\xfc\xfe\xd2\x68\x09\x1e\x12\x3c\xa8\x81\x2e\x5a\xf7\xdf\x46\xb3\x69\x28\xe2\x44\x1b\xe6\xb1\xdd\x1e\xfd\x6a\x79\x60\xb6\x7f\xe5\xb2\xa3\x53\x91\x89\xb9\xa2\x52\x83\x15\x99\x45\x96\x13\xa2\x48\xdc\x9d\x09\xc3\xa1\x33\xa0\x64\x65\xdd\x3e\x01\x00\x00\xff\xff\x05\xb1\xc3\xea\xb8\x00\x00\x00")

func invertIfMdBytes() ([]byte, error) {
	return bindataRead(
		_invertIfMd,
		"invert-if.md",
	)
}

func invertIfMd() (*asset, error) {
	bytes, err := invertIfMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invert-if.md", size: 184, mode: os.FileMode(420), modTime: time.Unix(1538575393, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x86, 0xe5, 0x2d, 0xf2, 0xd5, 0x9c, 0xf2, 0xd, 0xdc, 0x4b, 0x7d, 0x7e, 0x75, 0x58, 0x97, 0x71, 0xbf, 0xf9, 0x4d, 0xb2, 0x7f, 0x86, 0xd4, 0x4b, 0x15, 0xcb, 0x45, 0x61, 0x56, 0x99, 0x62}}
	return a, nil
}

var _multipleStringConversionsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x8a\x37\x82\x74\xf4\x76\x36\x26\xc4\x0c\x1b\x42\x8a\x2f\x31\x69\xa0\x67\x57\xb6\x7b\xdc\xf1\xeb\x51\x5a\xc6\x48\x7e\xdf\xfb\xf2\x1e\xf0\xe4\xb8\xe9\x0a\x63\x9a\xdb\x2f\x17\x18\x49\x6d\x52\xa1\x17\x36\x10\x92\x87\x35\xa9\x09\xd9\x98\x82\x1d\xc9\x56\x61\x4f\x98\xf4\x87\xfb\x49\xd0\x77\x3f\x27\x41\x93\xc2\x57\x7c\x9a\x9e\x41\xd8\x63\x30\x8e\xd5\xc4\x31\x10\xd2\xe9\x16\x9c\x46\xbc\x4d\xcd\xd1\x1c\x34\xbb\xa2\xb0\x67\x6b\x27\x2e\x68\x82\xb3\x1a\xa3\x70\x50\x9b\xfb\x33\x26\xc6\xb0\xa8\x07\xde\x5f\x37\x9a\x1f\xd0\x19\x7e\xc0\xe6\x00\x92\x82\x3c\x91\x51\x0e\x36\xef\x91\x67\xfd\xb8\x9b\x22\x16\x7f\x3c\x1e\x4f\xb3\xd6\xb1\xea\x4c\x52\x47\xb5\x7a\xdc\x8d\xfc\x7e\x1c\x06\xe0\xa5\xe3\x9b\x83\xaf\x6c\xb9\x39\x6f\x1b\x64\x5d\xe7\x82\xaf\xd5\x03\x59\xe5\xc2\x16\x9b\xc3\x2e\x8e\xd0\x3e\x47\x6f\x4e\x5b\x73\x4c\x2c\xc8\x7a\x5e\xc8\x18\x4e\x97\xfe\xdd\x4e\x19\x54\x18\x7c\x0d\x23\xc4\x6d\xe1\x7f\x94\x37\x95\xf1\x2f\x00\x00\xff\xff\x0e\x1f\x55\xe1\x6e\x01\x00\x00")

func multipleStringConversionsMdBytes() ([]byte, error) {
	return bindataRead(
		_multipleStringConversionsMd,
		"multiple-string-conversions.md",
	)
}

func multipleStringConversionsMd() (*asset, error) {
	bytes, err := multipleStringConversionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "multiple-string-conversions.md", size: 366, mode: os.FileMode(420), modTime: time.Unix(1538570346, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0xeb, 0x66, 0xf, 0x37, 0x67, 0xd7, 0x1, 0x11, 0x55, 0x92, 0xd3, 0xf, 0x65, 0xff, 0x5b, 0x23, 0x49, 0xe9, 0x3d, 0xfe, 0x93, 0x3c, 0xc2, 0x27, 0x91, 0x6f, 0xfb, 0x26, 0xf9, 0xa0, 0x68}}
	return a, nil
}

var _runeToByteMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x8b\x14\x31\x10\x85\xef\xfd\x2b\x9e\x37\x85\xb5\x07\xf4\x22\x7b\x5b\x10\x04\x0f\x5e\xdc\x8b\x88\xd0\x35\x49\x4d\x77\x41\xa6\xaa\xa9\xaa\xac\xf6\xbf\x97\xcc\xb0\xb0\xb7\x10\xf2\xbe\xf7\xbd\x7c\xc4\x2f\xeb\x20\x67\x94\xee\xce\x9a\xed\x40\x31\x7d\x61\x4f\xd1\x15\x84\xc5\xbb\xf2\x82\xb4\x71\x3e\x1f\xc9\xcb\x8c\xe7\x8d\xf1\xf5\xc7\x13\x22\x9d\xb4\x06\x44\x91\x9b\x04\xf8\x1f\x7b\x91\x60\x54\x83\x5a\x0e\x50\x92\x28\xa6\xae\x52\xac\x32\xca\x46\x4e\x25\xd9\x03\x61\xf7\x8c\x04\x2e\xa2\x3c\xe3\x7b\x8f\x84\xf3\x95\xaf\x67\xf6\x47\xc8\x05\x87\x75\x6c\xf4\xc2\xa3\xbc\x32\x35\xfc\x95\xdc\x10\x3b\x17\xa1\xf6\x96\x75\x03\x4d\x77\xed\x10\xd3\x01\x6d\x16\x71\xbc\xc3\x13\x86\xff\xb8\x58\x44\xf3\xf3\xa7\x05\x84\xb1\x02\xa6\xed\xc0\xd2\x45\xf3\xcb\x32\xbf\x3e\x2b\xa4\x43\x3a\x24\x12\x76\xc1\xb5\xb7\x94\xbd\xf1\x2d\x11\xf3\x34\x01\xc0\xb3\x61\xe5\x04\xa1\x32\xef\xec\xe8\x5a\xd9\x23\x49\xeb\xf8\xb0\xe1\x5c\xac\xb7\x8a\xc9\x99\x2a\x72\x63\xec\x36\x70\x8a\xdf\x3f\xd3\x45\xd7\x78\xb8\xf3\x1e\x6e\x9d\x01\xd2\xfa\x76\x8c\x28\xbe\xd9\x9f\xf7\x5b\xe6\x1e\x8f\xa7\xd3\xb9\xd9\x3a\xaf\xd6\x48\xd7\xd9\x7c\x3d\xc5\x9d\xf1\x61\xfe\x1f\x00\x00\xff\xff\xbd\xf3\x26\xb7\xba\x01\x00\x00")

func runeToByteMdBytes() ([]byte, error) {
	return bindataRead(
		_runeToByteMd,
		"rune-to-byte.md",
	)
}

func runeToByteMd() (*asset, error) {
	bytes, err := runeToByteMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rune-to-byte.md", size: 442, mode: os.FileMode(420), modTime: time.Unix(1538571726, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x37, 0x9e, 0xfe, 0x3, 0xaf, 0xe8, 0x87, 0x3b, 0xf1, 0x42, 0xca, 0x13, 0xb4, 0x9c, 0x3d, 0x7c, 0x5, 0xbe, 0x98, 0x43, 0xfd, 0x67, 0x0, 0xe6, 0x26, 0xb6, 0x1f, 0x63, 0x5b, 0x9b, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"error-message-format.md": errorMessageFormatMd,

	"increase.md": increaseMd,

	"invert-if.md": invertIfMd,

	"multiple-string-conversions.md": multipleStringConversionsMd,

	"rune-to-byte.md": runeToByteMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"error-message-format.md":        &bintree{errorMessageFormatMd, map[string]*bintree{}},
	"increase.md":                    &bintree{increaseMd, map[string]*bintree{}},
	"invert-if.md":                   &bintree{invertIfMd, map[string]*bintree{}},
	"multiple-string-conversions.md": &bintree{multipleStringConversionsMd, map[string]*bintree{}},
	"rune-to-byte.md":                &bintree{runeToByteMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
