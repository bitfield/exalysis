// Code generated by go-bindata. DO NOT EDIT.
// sources:
// benchmarking.md (1.304kB)
// greeting.md (6B)
// improvement.md (33B)
// newcomer_greeting.md (66B)
// not_formatted.md (172B)
// not_linted.md (141B)
// praise.md (15B)
// questions.md (79B)
// todo.md (73B)

package gtpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _benchmarkingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xc1\x8e\xdb\x46\x0c\xbd\xcf\x57\xbc\xe6\xb4\x11\x2a\x6d\x12\x24\xcd\xd6\xb7\xee\xa1\xc0\x02\x45\x51\x20\xb9\xf4\x26\x4a\xa2\xad\xa9\x47\x43\x61\x48\xd9\xeb\xbf\x2f\x66\x64\xaf\xed\xa6\x3e\x8d\x67\xc8\x47\xbe\x47\x3e\xb9\xba\xae\x5d\x55\x55\xcf\x1c\xfb\x71\xa2\xb4\xf7\x71\x57\x55\x95\x73\x2f\x18\xe9\xc0\x98\x68\x60\xa8\x4c\x0c\x5d\x76\x3b\x56\xf3\x12\x15\x36\x92\xc1\xc7\x83\x84\x03\xa3\xbb\x49\x6d\xf0\x12\xd1\x93\x32\x4e\xb2\x80\x42\x62\x1a\x4e\xd8\x47\x39\x82\x3a\x59\xec\x2e\xb8\xc4\xb8\x9e\x22\x74\xef\x67\xd8\xe8\xb5\x71\xee\xad\x13\x7d\xcb\xe7\x57\xaf\x86\xad\xa4\x12\x03\x7e\xe5\xd4\x7b\xe5\x06\x7f\xcb\x82\x7f\x16\x35\x44\xe6\x01\x26\xf9\xa9\x5f\x8c\x61\x23\x4f\x38\x7a\x1b\x37\xae\x6d\x5b\xb7\x13\x18\xab\xa1\x3e\xa0\xae\x4b\x0b\x68\x2e\xa7\x89\xa7\x12\xe3\xbe\x67\xec\xa3\x0f\x01\x5b\x9f\xd4\x90\x96\x98\x71\x4a\xa6\x82\xe2\x90\xff\xad\x57\xdd\xb5\x47\x59\x6c\x5e\xcc\x32\x9d\x2c\x93\x8d\xf9\x14\xfc\x9e\x4b\xaf\x1b\x77\xae\x2f\xba\xc1\x40\xe9\xe8\xa3\xdb\x09\xa5\x7e\xdc\x80\xa6\xe1\x97\xcf\x6e\xde\xef\x36\x98\xc9\xc6\x47\x93\xc7\x0b\xb3\xab\x08\x7f\xd2\xc4\xf5\x13\xf0\xf1\x43\xfe\x01\x1f\x9f\xbe\xfc\x8a\xa8\x8f\x32\x03\x5f\xbe\xe2\xb9\x1c\xbe\x82\x42\x90\x3e\xdf\xba\xbf\x7e\xfb\xf6\xcd\xc9\x1e\x3f\x60\x02\xf8\xd4\x7c\xf8\xfc\x49\x57\xb6\xbf\x4b\x02\x53\x3f\x5e\xb9\x64\x66\x89\x57\x05\x3a\x06\x21\xf8\xc8\x50\xa3\x54\xd8\x65\x35\x0b\xf9\xf6\xae\xb9\x16\x5b\x09\x41\x8e\x3c\xa0\x3b\x95\xf7\xb8\x4c\x1d\x27\xc8\x16\xae\x97\xc4\x8a\xf6\xa9\x05\x1d\xc8\x07\xea\x02\xe7\x29\xdd\x49\xd8\xe0\x7b\x4e\xe2\x57\xbb\x64\xb6\x2b\xd9\x16\x3e\x0e\xbe\x27\x63\xc5\x28\x47\x4c\x14\x4f\x30\x3f\xb1\xe2\xa1\x95\x99\x13\x95\x65\x6c\xdf\xc3\xdd\x01\xe2\x48\x7a\x59\x84\xa1\xc9\x73\x3d\xc3\xdb\x98\xf8\xd2\x9e\xbe\x81\xa3\xd5\x99\x79\xc8\xd5\xd0\x16\x65\x5b\x3c\x44\x8a\xa2\xdc\x4b\x1c\x14\x73\x26\x73\x29\xf7\xfe\x67\xb4\x13\x4f\x92\x4e\x6b\xc2\x73\x89\x77\x0f\xdd\x29\xb7\x29\x5b\xac\x8f\xeb\x40\xc8\x78\xf8\x4f\x7a\xd9\xa3\xf6\xfc\x5a\xda\x2f\x30\xe5\x62\x2d\x4d\x93\x2c\xd1\x7e\x84\x2a\xc6\xcb\x60\xee\x8a\xd6\xa0\x7a\xf7\x87\x1c\x39\xc1\x2b\x3a\x36\xe3\xf4\xae\x02\xcd\x73\xf0\xac\x67\xa5\x95\xef\x89\x9f\x15\x09\xa4\x57\xc1\xd7\xc5\xb8\x15\xbc\x0c\xda\xc4\x28\x9c\xa5\xf4\x12\x8b\xf8\x6d\xf1\x21\x85\x70\xe3\x8b\xab\x1d\x1a\xbc\x58\xee\xa5\x8a\x62\x15\x9c\xfa\x5d\xf4\x5b\xdf\x53\x5c\xed\x3b\x31\xe9\x92\x8a\x57\xb2\xe6\x3f\x95\xd1\xdf\x7d\x12\x4c\x24\x64\x45\x76\x6f\x5e\x56\x6c\x49\x8d\xd3\xad\xe9\x26\x49\x0c\xd9\x5a\xb6\xa3\x60\x4e\x32\x2c\x3d\xc3\x95\xeb\xc4\xc1\x97\x45\x4b\xac\x4b\x30\x45\x5d\x63\x16\x55\xdf\x85\x13\x7c\xec\x13\x93\x96\x4a\xd9\xda\xff\x43\xb0\x71\xf9\x9b\xf8\x6f\x00\x00\x00\xff\xff\x9a\x1c\x3b\xa5\x18\x05\x00\x00")

func benchmarkingMdBytes() ([]byte, error) {
	return bindataRead(
		_benchmarkingMd,
		"benchmarking.md",
	)
}

func benchmarkingMd() (*asset, error) {
	bytes, err := benchmarkingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "benchmarking.md", size: 1304, mode: os.FileMode(420), modTime: time.Unix(1538251558, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xf2, 0x64, 0x5f, 0x67, 0xaa, 0x9b, 0x79, 0xf2, 0x39, 0x77, 0x24, 0x9, 0xdc, 0x3b, 0x93, 0x1c, 0xbe, 0x61, 0xa8, 0xed, 0x6d, 0x7c, 0x99, 0x86, 0x52, 0xd2, 0xa1, 0xb3, 0x4c, 0x91, 0x90}}
	return a, nil
}

var _greetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xc8\x54\x50\x2d\x56\x04\x04\x00\x00\xff\xff\xc0\x2d\x24\x10\x06\x00\x00\x00")

func greetingMdBytes() ([]byte, error) {
	return bindataRead(
		_greetingMd,
		"greeting.md",
	)
}

func greetingMd() (*asset, error) {
	bytes, err := greetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "greeting.md", size: 6, mode: os.FileMode(420), modTime: time.Unix(1538247638, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x4d, 0xb8, 0x95, 0xfc, 0x5c, 0x3e, 0x1, 0x38, 0xee, 0x81, 0xa5, 0xe7, 0x8, 0xfb, 0xde, 0xf5, 0x17, 0x32, 0x9d, 0xa, 0xbd, 0x7f, 0xc2, 0xa0, 0x1d, 0x87, 0xea, 0xd1, 0xb, 0x32, 0xdb}}
	return a, nil
}

var _improvementMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xf2\x48\x2d\x4a\x55\x50\x2d\x56\x48\xcb\x2f\x52\x48\x2b\x2d\x2a\xc9\x48\x2d\x52\xc8\xcc\x2d\x28\xca\x2f\x4b\xcd\x4d\xcd\x2b\xb1\x02\x04\x00\x00\xff\xff\x8b\x2d\xa2\x17\x21\x00\x00\x00")

func improvementMdBytes() ([]byte, error) {
	return bindataRead(
		_improvementMd,
		"improvement.md",
	)
}

func improvementMd() (*asset, error) {
	bytes, err := improvementMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "improvement.md", size: 33, mode: os.FileMode(420), modTime: time.Unix(1538247678, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x47, 0x5, 0x78, 0x1d, 0x7e, 0x8f, 0xa1, 0x3e, 0x6, 0x5b, 0x34, 0xee, 0x69, 0x7b, 0x7, 0xb3, 0xb8, 0xa1, 0xc5, 0xfc, 0xf7, 0x39, 0xa2, 0x81, 0xe6, 0x2b, 0x55, 0x94, 0xe8, 0x66, 0xcb}}
	return a, nil
}

var _newcomer_greetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\x4f\xcd\x49\xce\xcf\x4d\x55\x28\xc9\x57\x70\xad\x48\x2d\x4a\xce\x2c\xce\x55\x48\xcc\x4b\x51\x28\x47\x88\xe7\xa4\x26\x16\xe5\x65\xe6\xa5\x2b\xb8\xe7\x2b\x2a\xf8\x65\x26\x83\x05\x73\x53\x53\x4b\x14\x2a\xf3\x4b\x15\x01\x01\x00\x00\xff\xff\xd0\x93\xfd\x53\x42\x00\x00\x00")

func newcomer_greetingMdBytes() ([]byte, error) {
	return bindataRead(
		_newcomer_greetingMd,
		"newcomer_greeting.md",
	)
}

func newcomer_greetingMd() (*asset, error) {
	bytes, err := newcomer_greetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "newcomer_greeting.md", size: 66, mode: os.FileMode(420), modTime: time.Unix(1538247651, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xa7, 0x40, 0x9e, 0xd3, 0xbd, 0x95, 0x71, 0x56, 0x20, 0xff, 0xff, 0xf4, 0xe5, 0xa9, 0x84, 0x38, 0x78, 0xa2, 0xf, 0xd6, 0x63, 0xe2, 0xec, 0xee, 0xdb, 0x80, 0x3c, 0xf1, 0x3b, 0x59, 0xa1}}
	return a, nil
}

var _not_formattedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xce\xc1\x89\xc3\x30\x14\x84\xe1\xfb\x56\x31\x0d\xac\x8b\x08\xc9\x21\xf7\x14\xe0\x87\x2c\xdb\x0f\x5b\x1a\x23\x8d\x02\xea\x3e\x28\xb9\x0e\x03\xdf\xff\x8f\xc0\x25\x62\x65\x49\x26\x79\xde\xe0\x19\x1b\xe1\x15\xef\x58\x3a\x3c\x5d\x2c\xb2\x2c\x88\xd0\x1e\x11\x98\x52\xcb\xae\x3e\xe1\x65\x47\x84\xe1\x24\x0f\x98\x30\x6f\x5c\x93\x66\x58\x5e\x50\x5a\x86\x0b\xcc\xe8\x6c\xe5\x6b\x4c\x7f\xb7\x58\x85\x1a\x85\x76\xfd\xe6\xe7\xfd\x01\xae\x08\x3b\x3d\xc4\x01\x2c\xc3\xf0\x3a\x72\xc6\x03\xd6\xc4\x64\xf2\x60\xe7\xd9\xa7\x4f\x00\x00\x00\xff\xff\x90\x40\x44\x08\xac\x00\x00\x00")

func not_formattedMdBytes() ([]byte, error) {
	return bindataRead(
		_not_formattedMd,
		"not_formatted.md",
	)
}

func not_formattedMd() (*asset, error) {
	bytes, err := not_formattedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_formatted.md", size: 172, mode: os.FileMode(420), modTime: time.Unix(1538247822, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x5b, 0xc0, 0xcc, 0x1, 0xe8, 0xee, 0xa1, 0xfb, 0x8b, 0xf3, 0xc5, 0xd0, 0x8d, 0x7c, 0xd7, 0xca, 0x3f, 0xdc, 0x20, 0xd4, 0xf3, 0x4e, 0x6c, 0x13, 0x3c, 0x85, 0x56, 0x79, 0xf5, 0x9f, 0xf8}}
	return a, nil
}

var _not_lintedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\xd1\xa9\xc3\x30\x0c\x05\xd0\x55\xee\x02\x2f\x7b\xbc\xff\x0e\x10\x11\xab\x8e\x48\xac\x5b\x24\xb9\xe0\xed\x4b\xfb\x7f\xe0\xfc\xe1\x60\x53\x64\x89\x37\x89\x96\x30\x47\x27\x24\x14\x6f\x8d\x05\x1b\x2f\x46\x89\x17\x8a\xa8\x53\x71\x70\x8c\xe9\x56\x6b\xc3\x43\x2e\x85\xe0\x26\x2f\x48\x61\xef\xbc\xcd\x6b\x87\x78\x43\x4c\x87\x15\xe8\x58\x9c\xf1\x4b\x36\xfc\x17\x4e\x49\x24\x87\x22\x67\xef\x9a\x65\xf4\xc4\x93\xf1\x65\xdb\x27\x00\x00\xff\xff\x46\x97\x84\x90\x8d\x00\x00\x00")

func not_lintedMdBytes() ([]byte, error) {
	return bindataRead(
		_not_lintedMd,
		"not_linted.md",
	)
}

func not_lintedMd() (*asset, error) {
	bytes, err := not_lintedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_linted.md", size: 141, mode: os.FileMode(420), modTime: time.Unix(1538211717, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xb, 0x57, 0x16, 0x13, 0x63, 0x6c, 0x7e, 0xf1, 0xbe, 0x8f, 0x7d, 0xfe, 0xbb, 0x7f, 0x9c, 0x2a, 0x3c, 0xe3, 0x8a, 0xd0, 0xd4, 0x10, 0xd2, 0x3c, 0x48, 0xda, 0x2b, 0x3c, 0x6e, 0x8b, 0xf5}}
	return a, nil
}

var _praiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\xc9\xc8\x2c\x56\xc8\xc9\xcf\xcf\x2e\x56\x50\x2d\x56\x04\x04\x00\x00\xff\xff\x8c\xda\x01\x83\x0f\x00\x00\x00")

func praiseMdBytes() ([]byte, error) {
	return bindataRead(
		_praiseMd,
		"praise.md",
	)
}

func praiseMd() (*asset, error) {
	bytes, err := praiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "praise.md", size: 15, mode: os.FileMode(420), modTime: time.Unix(1538247701, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xcb, 0x83, 0x60, 0x69, 0x93, 0xba, 0xce, 0x32, 0xd9, 0xbc, 0xd8, 0x1b, 0x64, 0x86, 0xeb, 0x1c, 0xba, 0x31, 0x65, 0x69, 0x34, 0x6d, 0xfc, 0xbb, 0xf3, 0x4c, 0x12, 0x6d, 0x4e, 0xf, 0x23}}
	return a, nil
}

var _questionsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x4b\x0a\x80\x20\x00\x04\xd0\x7d\xa7\x98\x56\xed\x3a\x46\xd0\x31\x84\x46\x14\xcd\x29\xbf\x74\xfb\xa8\xfd\x7b\xd3\x46\x46\xd8\x4c\xa2\x0a\xa6\x04\x78\x8b\x47\x0d\xce\x74\xe2\x6e\x2c\xd5\x2b\x15\x28\x63\x98\x54\x3f\x14\x92\x06\x4e\x65\xae\xd8\x97\x03\x51\xfd\xbf\x8e\xf1\x9a\xdf\x00\x00\x00\xff\xff\x93\x42\xc4\x70\x4f\x00\x00\x00")

func questionsMdBytes() ([]byte, error) {
	return bindataRead(
		_questionsMd,
		"questions.md",
	)
}

func questionsMd() (*asset, error) {
	bytes, err := questionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "questions.md", size: 79, mode: os.FileMode(420), modTime: time.Unix(1538258778, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x9d, 0x81, 0x1f, 0x6c, 0x35, 0xc9, 0x79, 0xe6, 0xd6, 0xd0, 0xb7, 0x8a, 0x8d, 0x9e, 0xeb, 0x21, 0x6, 0x3e, 0x9b, 0x33, 0x60, 0xbe, 0xda, 0x27, 0xd2, 0xc, 0x5b, 0x59, 0x38, 0x86, 0x8b}}
	return a, nil
}

var _todoMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xbb\x0d\x84\x30\x10\x45\xd1\x7c\xab\xb8\xc9\xd6\x41\x40\x44\x19\x23\x30\xd8\x62\xe4\x67\xe1\x0f\xa2\x7b\x24\xf2\xf3\x9b\xd5\x7d\xe3\x51\x27\xda\x08\x18\x2e\x9d\x58\xa3\xc5\xc0\x2e\x77\xdd\x29\x1f\xfc\x2b\x55\x2c\xac\x96\xb1\x52\x2e\x8d\xf0\x89\x2a\xef\x2d\x29\x4f\x6f\x00\x00\x00\xff\xff\xf1\x50\x3a\x1d\x49\x00\x00\x00")

func todoMdBytes() ([]byte, error) {
	return bindataRead(
		_todoMd,
		"todo.md",
	)
}

func todoMd() (*asset, error) {
	bytes, err := todoMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "todo.md", size: 73, mode: os.FileMode(420), modTime: time.Unix(1538247691, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x52, 0x39, 0xc9, 0xcb, 0x75, 0x93, 0x60, 0xe8, 0x21, 0x22, 0x7b, 0xc0, 0x66, 0xed, 0x94, 0x3f, 0xd1, 0xef, 0x2, 0x3e, 0xf8, 0xf1, 0xfd, 0x19, 0x67, 0x7c, 0xdc, 0x7b, 0x4e, 0x6b, 0x7a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"benchmarking.md": benchmarkingMd,

	"greeting.md": greetingMd,

	"improvement.md": improvementMd,

	"newcomer_greeting.md": newcomer_greetingMd,

	"not_formatted.md": not_formattedMd,

	"not_linted.md": not_lintedMd,

	"praise.md": praiseMd,

	"questions.md": questionsMd,

	"todo.md": todoMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"benchmarking.md":      &bintree{benchmarkingMd, map[string]*bintree{}},
	"greeting.md":          &bintree{greetingMd, map[string]*bintree{}},
	"improvement.md":       &bintree{improvementMd, map[string]*bintree{}},
	"newcomer_greeting.md": &bintree{newcomer_greetingMd, map[string]*bintree{}},
	"not_formatted.md":     &bintree{not_formattedMd, map[string]*bintree{}},
	"not_linted.md":        &bintree{not_lintedMd, map[string]*bintree{}},
	"praise.md":            &bintree{praiseMd, map[string]*bintree{}},
	"questions.md":         &bintree{questionsMd, map[string]*bintree{}},
	"todo.md":              &bintree{todoMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
