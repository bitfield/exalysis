// Code generated by go-bindata. DO NOT EDIT.
// sources:
// response/comment.md (21B)
// response/greeting.md (6B)
// response/improvement.md (33B)
// response/newcomer_greeting.md (66B)
// response/praise.md (15B)
// response/questions.md (79B)
// response/todo.md (73B)
// tools/not_formatted.md (172B)
// tools/not_linted.md (149B)
// tools/pass_tests.md (152B)
// topic/benchmarking.md (1.304kB)
// topic/pprof-allocations.md (2.069kB)
// topic/regex.md (1.428kB)

package gtpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _responseCommentMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x52\x2d\x56\xc8\xcf\x53\x28\xc9\xc8\x2c\x56\x48\xad\x48\x2d\x4a\xce\x2c\x4e\xb5\x02\x04\x00\x00\xff\xff\x8f\x03\x06\xcf\x15\x00\x00\x00")

func responseCommentMdBytes() ([]byte, error) {
	return bindataRead(
		_responseCommentMd,
		"response/comment.md",
	)
}

func responseCommentMd() (*asset, error) {
	bytes, err := responseCommentMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/comment.md", size: 21, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0xff, 0xaf, 0xf3, 0x2f, 0x3f, 0xad, 0x81, 0x55, 0xf4, 0xd, 0x9a, 0x98, 0x2d, 0x83, 0xef, 0x3e, 0xf5, 0x1c, 0x7a, 0xe8, 0x9, 0x36, 0x2e, 0xab, 0xeb, 0x7e, 0x6a, 0x9, 0xbe, 0x23, 0x4f}}
	return a, nil
}

var _responseGreetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xc8\x54\x50\x2d\x56\x04\x04\x00\x00\xff\xff\xc0\x2d\x24\x10\x06\x00\x00\x00")

func responseGreetingMdBytes() ([]byte, error) {
	return bindataRead(
		_responseGreetingMd,
		"response/greeting.md",
	)
}

func responseGreetingMd() (*asset, error) {
	bytes, err := responseGreetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/greeting.md", size: 6, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x4d, 0xb8, 0x95, 0xfc, 0x5c, 0x3e, 0x1, 0x38, 0xee, 0x81, 0xa5, 0xe7, 0x8, 0xfb, 0xde, 0xf5, 0x17, 0x32, 0x9d, 0xa, 0xbd, 0x7f, 0xc2, 0xa0, 0x1d, 0x87, 0xea, 0xd1, 0xb, 0x32, 0xdb}}
	return a, nil
}

var _responseImprovementMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xf2\x48\x2d\x4a\x55\x50\x2d\x56\x48\xcb\x2f\x52\x48\x2b\x2d\x2a\xc9\x48\x2d\x52\xc8\xcc\x2d\x28\xca\x2f\x4b\xcd\x4d\xcd\x2b\xb1\x02\x04\x00\x00\xff\xff\x8b\x2d\xa2\x17\x21\x00\x00\x00")

func responseImprovementMdBytes() ([]byte, error) {
	return bindataRead(
		_responseImprovementMd,
		"response/improvement.md",
	)
}

func responseImprovementMd() (*asset, error) {
	bytes, err := responseImprovementMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/improvement.md", size: 33, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x47, 0x5, 0x78, 0x1d, 0x7e, 0x8f, 0xa1, 0x3e, 0x6, 0x5b, 0x34, 0xee, 0x69, 0x7b, 0x7, 0xb3, 0xb8, 0xa1, 0xc5, 0xfc, 0xf7, 0x39, 0xa2, 0x81, 0xe6, 0x2b, 0x55, 0x94, 0xe8, 0x66, 0xcb}}
	return a, nil
}

var _responseNewcomer_greetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\x4f\xcd\x49\xce\xcf\x4d\x55\x28\xc9\x57\x70\xad\x48\x2d\x4a\xce\x2c\xce\x55\x48\xcc\x4b\x51\x28\x47\x88\xe7\xa4\x26\x16\xe5\x65\xe6\xa5\x2b\xb8\xe7\x2b\x2a\xf8\x65\x26\x83\x05\x73\x53\x53\x4b\x14\x2a\xf3\x4b\x15\x01\x01\x00\x00\xff\xff\xd0\x93\xfd\x53\x42\x00\x00\x00")

func responseNewcomer_greetingMdBytes() ([]byte, error) {
	return bindataRead(
		_responseNewcomer_greetingMd,
		"response/newcomer_greeting.md",
	)
}

func responseNewcomer_greetingMd() (*asset, error) {
	bytes, err := responseNewcomer_greetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/newcomer_greeting.md", size: 66, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xa7, 0x40, 0x9e, 0xd3, 0xbd, 0x95, 0x71, 0x56, 0x20, 0xff, 0xff, 0xf4, 0xe5, 0xa9, 0x84, 0x38, 0x78, 0xa2, 0xf, 0xd6, 0x63, 0xe2, 0xec, 0xee, 0xdb, 0x80, 0x3c, 0xf1, 0x3b, 0x59, 0xa1}}
	return a, nil
}

var _responsePraiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\xc9\xc8\x2c\x56\xc8\xc9\xcf\xcf\x2e\x56\x50\x2d\x56\x04\x04\x00\x00\xff\xff\x8c\xda\x01\x83\x0f\x00\x00\x00")

func responsePraiseMdBytes() ([]byte, error) {
	return bindataRead(
		_responsePraiseMd,
		"response/praise.md",
	)
}

func responsePraiseMd() (*asset, error) {
	bytes, err := responsePraiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/praise.md", size: 15, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xcb, 0x83, 0x60, 0x69, 0x93, 0xba, 0xce, 0x32, 0xd9, 0xbc, 0xd8, 0x1b, 0x64, 0x86, 0xeb, 0x1c, 0xba, 0x31, 0x65, 0x69, 0x34, 0x6d, 0xfc, 0xbb, 0xf3, 0x4c, 0x12, 0x6d, 0x4e, 0xf, 0x23}}
	return a, nil
}

var _responseQuestionsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x4b\x0a\x80\x20\x00\x04\xd0\x7d\xa7\x98\x56\xed\x3a\x46\xd0\x31\x84\x46\x14\xcd\x29\xbf\x74\xfb\xa8\xfd\x7b\xd3\x46\x46\xd8\x4c\xa2\x0a\xa6\x04\x78\x8b\x47\x0d\xce\x74\xe2\x6e\x2c\xd5\x2b\x15\x28\x63\x98\x54\x3f\x14\x92\x06\x4e\x65\xae\xd8\x97\x03\x51\xfd\xbf\x8e\xf1\x9a\xdf\x00\x00\x00\xff\xff\x93\x42\xc4\x70\x4f\x00\x00\x00")

func responseQuestionsMdBytes() ([]byte, error) {
	return bindataRead(
		_responseQuestionsMd,
		"response/questions.md",
	)
}

func responseQuestionsMd() (*asset, error) {
	bytes, err := responseQuestionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/questions.md", size: 79, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x9d, 0x81, 0x1f, 0x6c, 0x35, 0xc9, 0x79, 0xe6, 0xd6, 0xd0, 0xb7, 0x8a, 0x8d, 0x9e, 0xeb, 0x21, 0x6, 0x3e, 0x9b, 0x33, 0x60, 0xbe, 0xda, 0x27, 0xd2, 0xc, 0x5b, 0x59, 0x38, 0x86, 0x8b}}
	return a, nil
}

var _responseTodoMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xbb\x0d\x84\x30\x10\x45\xd1\x7c\xab\xb8\xc9\xd6\x41\x40\x44\x19\x23\x30\xd8\x62\xe4\x67\xe1\x0f\xa2\x7b\x24\xf2\xf3\x9b\xd5\x7d\xe3\x51\x27\xda\x08\x18\x2e\x9d\x58\xa3\xc5\xc0\x2e\x77\xdd\x29\x1f\xfc\x2b\x55\x2c\xac\x96\xb1\x52\x2e\x8d\xf0\x89\x2a\xef\x2d\x29\x4f\x6f\x00\x00\x00\xff\xff\xf1\x50\x3a\x1d\x49\x00\x00\x00")

func responseTodoMdBytes() ([]byte, error) {
	return bindataRead(
		_responseTodoMd,
		"response/todo.md",
	)
}

func responseTodoMd() (*asset, error) {
	bytes, err := responseTodoMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/todo.md", size: 73, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x52, 0x39, 0xc9, 0xcb, 0x75, 0x93, 0x60, 0xe8, 0x21, 0x22, 0x7b, 0xc0, 0x66, 0xed, 0x94, 0x3f, 0xd1, 0xef, 0x2, 0x3e, 0xf8, 0xf1, 0xfd, 0x19, 0x67, 0x7c, 0xdc, 0x7b, 0x4e, 0x6b, 0x7a}}
	return a, nil
}

var _toolsNot_formattedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xce\xc1\x89\xc3\x30\x14\x84\xe1\xfb\x56\x31\x0d\xac\x8b\x08\xc9\x21\xf7\x14\xe0\x87\x2c\xdb\x0f\x5b\x1a\x23\x8d\x02\xea\x3e\x28\xb9\x0e\x03\xdf\xff\x8f\xc0\x25\x62\x65\x49\x26\x79\xde\xe0\x19\x1b\xe1\x15\xef\x58\x3a\x3c\x5d\x2c\xb2\x2c\x88\xd0\x1e\x11\x98\x52\xcb\xae\x3e\xe1\x65\x47\x84\xe1\x24\x0f\x98\x30\x6f\x5c\x93\x66\x58\x5e\x50\x5a\x86\x0b\xcc\xe8\x6c\xe5\x6b\x4c\x7f\xb7\x58\x85\x1a\x85\x76\xfd\xe6\xe7\xfd\x01\xae\x08\x3b\x3d\xc4\x01\x2c\xc3\xf0\x3a\x72\xc6\x03\xd6\xc4\x64\xf2\x60\xe7\xd9\xa7\x4f\x00\x00\x00\xff\xff\x90\x40\x44\x08\xac\x00\x00\x00")

func toolsNot_formattedMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsNot_formattedMd,
		"tools/not_formatted.md",
	)
}

func toolsNot_formattedMd() (*asset, error) {
	bytes, err := toolsNot_formattedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/not_formatted.md", size: 172, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x5b, 0xc0, 0xcc, 0x1, 0xe8, 0xee, 0xa1, 0xfb, 0x8b, 0xf3, 0xc5, 0xd0, 0x8d, 0x7c, 0xd7, 0xca, 0x3f, 0xdc, 0x20, 0xd4, 0xf3, 0x4e, 0x6c, 0x13, 0x3c, 0x85, 0x56, 0x79, 0xf5, 0x9f, 0xf8}}
	return a, nil
}

var _toolsNot_lintedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\xc1\x0d\xc2\x30\x0c\x40\xd1\x3b\x53\xfc\x05\xe8\x1e\xdc\x19\xa0\x56\x63\xd2\xa8\x8d\x8d\x1c\x07\xa9\xdb\x23\xb8\x3f\xe9\xdd\xd9\xbc\x28\x23\xc5\x8a\x44\x19\x34\xa3\x3a\x12\xca\x47\xe3\xa2\xf5\xb7\x47\x8a\x25\xe9\xe4\xae\x6c\xde\xfb\xb4\x96\xd7\xc2\x53\x0e\x45\x38\xdd\x0f\x24\x59\xab\x9f\xcd\x72\x45\xac\x10\xd3\x68\x89\x1b\x97\xcf\xf8\x27\x0b\xb7\x47\xb2\xcb\xc0\x4d\xf1\xa0\x7b\x28\x63\xd6\xaa\x23\x9b\xdb\xe0\xe5\xf1\xe3\xcb\x37\x00\x00\xff\xff\x8d\xe8\x81\x19\x95\x00\x00\x00")

func toolsNot_lintedMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsNot_lintedMd,
		"tools/not_linted.md",
	)
}

func toolsNot_lintedMd() (*asset, error) {
	bytes, err := toolsNot_lintedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/not_linted.md", size: 149, mode: os.FileMode(420), modTime: time.Unix(1541092677, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xf5, 0x6f, 0x39, 0x88, 0x7e, 0xc4, 0xf2, 0x6b, 0x8b, 0xfe, 0xd0, 0xf2, 0x49, 0xe1, 0x3c, 0xd2, 0x71, 0x69, 0xe3, 0x91, 0xa6, 0xa9, 0xa3, 0xbb, 0x23, 0x68, 0xcf, 0x2c, 0xc5, 0x2e, 0x2b}}
	return a, nil
}

var _toolsPass_testsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xb1\x0d\x02\x31\x10\x44\xd1\x9c\x2a\xa6\x01\xae\x05\x12\x12\xca\xb0\xb8\xb1\x6c\x61\x79\xd1\xce\x2e\x70\xdd\xa3\x3b\x02\xd2\xaf\x99\x77\x46\xce\x6a\x1e\x39\x4b\x70\x6c\x88\xd6\x05\xd9\xc8\xe8\x36\xb1\x1a\x85\x69\x81\x67\x91\x10\x8d\x08\x2a\xb4\xe0\xda\x57\x6c\x96\xf0\x9c\xff\x7c\x39\xdd\xea\x51\x8b\xf3\x78\x29\x9d\x68\xf6\x46\xd8\x6e\xbe\xf8\xe3\xf9\xa1\xdf\xbb\x88\x4a\x0e\x54\x27\xf7\x41\xd1\x03\xd5\x1c\xad\xcf\xd0\xf2\x0d\x00\x00\xff\xff\xff\xef\xf8\x21\x98\x00\x00\x00")

func toolsPass_testsMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsPass_testsMd,
		"tools/pass_tests.md",
	)
}

func toolsPass_testsMd() (*asset, error) {
	bytes, err := toolsPass_testsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/pass_tests.md", size: 152, mode: os.FileMode(420), modTime: time.Unix(1541097999, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x9f, 0xc2, 0x79, 0x52, 0x79, 0xaf, 0xba, 0xe3, 0x4f, 0xce, 0x8a, 0x9, 0xdc, 0xda, 0xce, 0x1d, 0xab, 0x26, 0xe4, 0x17, 0xd2, 0x98, 0x98, 0x78, 0xf9, 0x12, 0x4d, 0x35, 0x73, 0x88, 0x72}}
	return a, nil
}

var _topicBenchmarkingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xc1\x8e\xdb\x46\x0c\xbd\xcf\x57\xbc\xe6\xb4\x11\x2a\x6d\x12\x24\xcd\xd6\xb7\xee\xa1\xc0\x02\x45\x51\x20\xb9\xf4\x26\x4a\xa2\xad\xa9\x47\x43\x61\x48\xd9\xeb\xbf\x2f\x66\x64\xaf\xed\xa6\x3e\x8d\x67\xc8\x47\xbe\x47\x3e\xb9\xba\xae\x5d\x55\x55\xcf\x1c\xfb\x71\xa2\xb4\xf7\x71\x57\x55\x95\x73\x2f\x18\xe9\xc0\x98\x68\x60\xa8\x4c\x0c\x5d\x76\x3b\x56\xf3\x12\x15\x36\x92\xc1\xc7\x83\x84\x03\xa3\xbb\x49\x6d\xf0\x12\xd1\x93\x32\x4e\xb2\x80\x42\x62\x1a\x4e\xd8\x47\x39\x82\x3a\x59\xec\x2e\xb8\xc4\xb8\x9e\x22\x74\xef\x67\xd8\xe8\xb5\x71\xee\xad\x13\x7d\xcb\xe7\x57\xaf\x86\xad\xa4\x12\x03\x7e\xe5\xd4\x7b\xe5\x06\x7f\xcb\x82\x7f\x16\x35\x44\xe6\x01\x26\xf9\xa9\x5f\x8c\x61\x23\x4f\x38\x7a\x1b\x37\xae\x6d\x5b\xb7\x13\x18\xab\xa1\x3e\xa0\xae\x4b\x0b\x68\x2e\xa7\x89\xa7\x12\xe3\xbe\x67\xec\xa3\x0f\x01\x5b\x9f\xd4\x90\x96\x98\x71\x4a\xa6\x82\xe2\x90\xff\xad\x57\xdd\xb5\x47\x59\x6c\x5e\xcc\x32\x9d\x2c\x93\x8d\xf9\x14\xfc\x9e\x4b\xaf\x1b\x77\xae\x2f\xba\xc1\x40\xe9\xe8\xa3\xdb\x09\xa5\x7e\xdc\x80\xa6\xe1\x97\xcf\x6e\xde\xef\x36\x98\xc9\xc6\x47\x93\xc7\x0b\xb3\xab\x08\x7f\xd2\xc4\xf5\x13\xf0\xf1\x43\xfe\x01\x1f\x9f\xbe\xfc\x8a\xa8\x8f\x32\x03\x5f\xbe\xe2\xb9\x1c\xbe\x82\x42\x90\x3e\xdf\xba\xbf\x7e\xfb\xf6\xcd\xc9\x1e\x3f\x60\x02\xf8\xd4\x7c\xf8\xfc\x49\x57\xb6\xbf\x4b\x02\x53\x3f\x5e\xb9\x64\x66\x89\x57\x05\x3a\x06\x21\xf8\xc8\x50\xa3\x54\xd8\x65\x35\x0b\xf9\xf6\xae\xb9\x16\x5b\x09\x41\x8e\x3c\xa0\x3b\x95\xf7\xb8\x4c\x1d\x27\xc8\x16\xae\x97\xc4\x8a\xf6\xa9\x05\x1d\xc8\x07\xea\x02\xe7\x29\xdd\x49\xd8\xe0\x7b\x4e\xe2\x57\xbb\x64\xb6\x2b\xd9\x16\x3e\x0e\xbe\x27\x63\xc5\x28\x47\x4c\x14\x4f\x30\x3f\xb1\xe2\xa1\x95\x99\x13\x95\x65\x6c\xdf\xc3\xdd\x01\xe2\x48\x7a\x59\x84\xa1\xc9\x73\x3d\xc3\xdb\x98\xf8\xd2\x9e\xbe\x81\xa3\xd5\x99\x79\xc8\xd5\xd0\x16\x65\x5b\x3c\x44\x8a\xa2\xdc\x4b\x1c\x14\x73\x26\x73\x29\xf7\xfe\x67\xb4\x13\x4f\x92\x4e\x6b\xc2\x73\x89\x77\x0f\xdd\x29\xb7\x29\x5b\xac\x8f\xeb\x40\xc8\x78\xf8\x4f\x7a\xd9\xa3\xf6\xfc\x5a\xda\x2f\x30\xe5\x62\x2d\x4d\x93\x2c\xd1\x7e\x84\x2a\xc6\xcb\x60\xee\x8a\xd6\xa0\x7a\xf7\x87\x1c\x39\xc1\x2b\x3a\x36\xe3\xf4\xae\x02\xcd\x73\xf0\xac\x67\xa5\x95\xef\x89\x9f\x15\x09\xa4\x57\xc1\xd7\xc5\xb8\x15\xbc\x0c\xda\xc4\x28\x9c\xa5\xf4\x12\x8b\xf8\x6d\xf1\x21\x85\x70\xe3\x8b\xab\x1d\x1a\xbc\x58\xee\xa5\x8a\x62\x15\x9c\xfa\x5d\xf4\x5b\xdf\x53\x5c\xed\x3b\x31\xe9\x92\x8a\x57\xb2\xe6\x3f\x95\xd1\xdf\x7d\x12\x4c\x24\x64\x45\x76\x6f\x5e\x56\x6c\x49\x8d\xd3\xad\xe9\x26\x49\x0c\xd9\x5a\xb6\xa3\x60\x4e\x32\x2c\x3d\xc3\x95\xeb\xc4\xc1\x97\x45\x4b\xac\x4b\x30\x45\x5d\x63\x16\x55\xdf\x85\x13\x7c\xec\x13\x93\x96\x4a\xd9\xda\xff\x43\xb0\x71\xf9\x9b\xf8\x6f\x00\x00\x00\xff\xff\x9a\x1c\x3b\xa5\x18\x05\x00\x00")

func topicBenchmarkingMdBytes() ([]byte, error) {
	return bindataRead(
		_topicBenchmarkingMd,
		"topic/benchmarking.md",
	)
}

func topicBenchmarkingMd() (*asset, error) {
	bytes, err := topicBenchmarkingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/benchmarking.md", size: 1304, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xf2, 0x64, 0x5f, 0x67, 0xaa, 0x9b, 0x79, 0xf2, 0x39, 0x77, 0x24, 0x9, 0xdc, 0x3b, 0x93, 0x1c, 0xbe, 0x61, 0xa8, 0xed, 0x6d, 0x7c, 0x99, 0x86, 0x52, 0xd2, 0xa1, 0xb3, 0x4c, 0x91, 0x90}}
	return a, nil
}

var _topicPprofAllocationsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\x8f\xe4\x34\x10\xbd\xfb\x57\xd4\x0d\x76\xa4\xa4\x85\x10\x97\x91\x38\xb0\x88\x15\x1c\x58\x21\x58\x69\x0f\x08\x29\x15\xa7\x92\x78\xc7\x76\x45\x76\x79\x32\xfd\xef\x51\xd9\x49\xf7\x0c\x08\x71\x8b\x3a\xf5\xf5\x5e\xbd\x57\x69\xd3\x75\x9d\x79\x78\x78\xd8\xb6\xc4\xf3\x23\xfc\xe0\x3d\x5b\x14\xc7\x31\x3f\x3c\x3c\x18\xf3\x5b\xe2\xd9\x79\x17\x17\x70\x19\x10\xd6\xb2\x10\xe4\x32\x7e\x21\x2b\x80\x71\x02\x59\x29\x11\x60\x22\x08\x18\xaf\xb0\xf1\x4e\x69\x2e\x1e\x76\xbc\x66\x10\x86\xad\xe6\x13\x2c\x0c\xb8\x6d\xde\x1d\xb5\x7b\xf8\xc0\xde\xf3\xae\x85\x7f\x81\xdd\x79\x0f\x66\xa2\x6c\x93\x1b\x09\x10\x9e\x29\x5d\xc1\xbb\xe0\x84\x26\xd8\x30\x09\xf0\x0c\x4e\x7a\x63\x3e\xad\x04\x23\x66\x97\x61\xe6\x74\x54\xd7\x22\x4b\x6d\xb5\x24\x0c\x59\x27\x1d\x2a\x9c\xa1\x87\x4f\xb7\xf9\xbe\x85\xc9\xcd\x33\x25\x8a\xa2\xf5\xb3\xe3\xa8\x55\x65\xa5\x33\x1a\x84\xd9\x3f\x9a\x0e\xfe\x4c\x25\x8a\x0b\x74\xc6\xfd\xf5\xf5\x2a\xb2\xe5\xc7\xcb\x65\x61\x8f\x71\xe9\x39\x2d\x97\xed\x69\xb9\x1c\x71\x97\x9a\x7f\x79\xa7\xa9\x91\x04\x34\xfa\x7f\x73\x23\xc9\x45\x5f\xbd\x4e\xae\x8f\x60\x39\x04\x8c\xd3\x3d\x73\xf4\xbc\xf4\xaf\xd3\x4f\xd8\xdd\xc2\xdd\x09\xfb\x5d\x23\xe7\x4d\x89\x1b\x50\x97\x61\x2c\xce\x0b\x24\xb7\xac\x02\x2e\x0a\x57\xe4\x0b\x57\xd0\x76\x45\x17\xeb\x3e\x2d\x46\xd0\x15\x58\x4b\x39\xd3\x64\x76\x27\x2b\x0c\x47\x18\x1c\x3c\x71\x82\x2f\x25\xcb\x8d\x37\x17\x6b\x31\xa1\x14\x5c\x44\xdf\xc3\x67\x6a\x3b\x2d\x99\x40\x56\x97\x21\xf2\xae\x6a\xf0\xcc\x4f\x30\x11\x6d\x94\xee\x33\x18\xbc\x6b\x4e\x37\xc2\x25\x81\xe5\x89\x7a\x63\x3e\xb8\x94\x05\x76\x82\x48\x34\x69\x01\x9b\x08\x45\x15\x12\x28\x70\xba\x9e\xf2\xaa\x1d\x75\xf4\x89\x5b\xbf\x7d\x55\xd1\xa5\x12\xa3\x8a\x63\xa4\x68\xd7\x80\xe9\x29\x3f\x1a\x33\x0c\x83\x51\x3c\x94\x05\xba\x67\xe8\xba\xfa\x16\xfa\xf3\x29\x50\x80\xae\x0b\x14\x4e\xe9\x06\x0a\x3d\x17\x79\xf3\x63\x42\xa1\xef\xbf\xa9\xb5\xcc\x67\x82\x15\x9f\x75\xa8\xe1\x08\x1d\xa0\x26\x2a\x68\xcb\x51\xd0\xd5\x29\xfe\x73\x68\x17\x9f\x29\x8b\x5b\x14\x99\x13\xa8\x94\xbf\x96\xe5\xb9\x4c\xd3\x96\x37\x27\x0e\x6f\xf9\x6e\xa0\xda\xe6\x8f\x11\xda\x68\x1f\x79\x57\xf6\x54\xfe\xc7\x8e\xee\x35\x63\x66\x9d\xe1\x67\xf5\xc7\xde\x06\x91\xeb\x46\x90\x37\xb2\x6e\x76\xf6\x9f\xed\x73\x0f\xe6\xbd\x92\x96\x45\x0d\xd9\x84\xb1\x92\xdf\xd4\x37\x90\x57\xde\x01\xc1\xbb\x5c\xbd\x8a\xde\x03\x3e\xa3\xf3\x38\x7a\xba\x57\x50\xae\x2c\x17\x5f\xef\x46\x3c\x69\xab\xaa\x40\x81\x7d\x45\x01\x65\x5a\x78\x3b\xb9\xb2\x1c\x72\x09\x94\x72\x05\xd1\x9a\x0a\x6f\xdf\x55\x11\xd6\x27\xe8\x6c\x09\x6d\x06\x4e\xa2\x85\x83\x2a\xd8\xd8\x12\x8a\x47\x3d\x20\x96\x7d\x09\xb1\xaf\x9b\x52\x98\xe8\x33\x83\x5d\xc9\x3e\xa9\x4e\xec\x5a\xd5\x06\xf4\x82\x56\xfc\x15\x0e\x35\x52\x3e\x47\x50\xea\x15\x5d\x28\x76\xd5\xbb\x95\x9a\xc4\xda\xe5\xab\x57\xf1\x5c\xd0\xa0\xf0\x87\xa3\xa8\x11\x7c\x22\x7d\x9b\x68\x29\x1e\x13\xd0\xcb\x96\x28\x57\x3b\xea\xb0\x84\xc9\xae\xba\x96\xeb\x4d\xf0\xf0\x53\x14\x4a\xf5\xb2\xd1\x0b\x86\xcd\x53\xdd\xd9\x5c\xa2\x55\x77\x40\xc4\x40\x1a\x0e\x3b\x46\x65\xe9\xb5\x72\x1e\xa1\xa9\xa0\x6e\xe0\xcc\xf8\x88\x81\x9a\x12\x3e\x55\x57\xa8\x27\xb9\xc8\x56\xa4\x6e\xa8\xe2\xde\x2b\x8e\xe1\x75\xca\x00\x3b\xea\x81\x2d\x71\x3a\x8e\x3c\xca\xbf\x78\xe9\xe1\x3d\xcd\x9c\xda\x88\xde\x45\xca\x2d\xee\xb4\x33\x9d\xfc\xd5\x81\xb5\x73\x26\xba\x11\x79\xbe\xd4\x46\x67\xc2\xd4\xc3\xef\x14\x28\x8c\x94\x5a\x29\x95\x65\x35\x7c\xd5\xcb\xed\x5b\x52\x55\x60\xee\xa6\xee\xe1\x0f\x86\x89\xe3\x57\x52\x4f\x97\xc7\x14\xda\xb5\xd0\x86\x99\x9e\x29\xa1\x87\x5f\x69\xc1\xf1\x2a\x04\x23\x55\x33\x9e\x3d\x55\x78\x08\xd9\xc5\xc5\x37\x18\xf5\x9b\x71\x50\x83\x19\x0c\xbd\x90\x2d\x35\x10\x66\xda\x41\x56\x2e\xb9\x92\xe2\x02\xa9\x27\xcc\x8f\x9e\xf3\xf1\x1d\x3b\xd6\x12\x28\xd6\x7d\x29\x58\xc2\x7c\x55\x57\xbb\xfa\x39\x5c\x28\xd6\xdb\x01\xd1\x59\x82\xc9\x61\xfb\x62\xdd\x2d\xfd\x5a\xf9\xb1\x29\xbf\x37\xc3\x36\xcd\x43\xe3\xf0\x76\x00\x8f\xdc\xba\x9f\xac\x3e\x72\x02\x98\x61\x9b\x66\x68\xc7\x65\xd8\x69\x3c\x92\x78\xa3\xe6\xfe\x31\xf1\x9e\x29\xb5\x24\x9d\x4e\x7f\x3c\x2b\x55\x41\xf7\x46\xff\x10\xfc\x1d\x00\x00\xff\xff\x80\xd8\x13\x05\x15\x08\x00\x00")

func topicPprofAllocationsMdBytes() ([]byte, error) {
	return bindataRead(
		_topicPprofAllocationsMd,
		"topic/pprof-allocations.md",
	)
}

func topicPprofAllocationsMd() (*asset, error) {
	bytes, err := topicPprofAllocationsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/pprof-allocations.md", size: 2069, mode: os.FileMode(420), modTime: time.Unix(1540752064, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0xc5, 0xa6, 0x4b, 0x96, 0x41, 0xeb, 0x7c, 0x23, 0xb7, 0xb8, 0x27, 0xb9, 0x2e, 0x6c, 0x12, 0x53, 0x30, 0xe, 0xaa, 0xba, 0xdc, 0x9e, 0x71, 0xd6, 0xe6, 0xd4, 0x73, 0x7d, 0xa3, 0xe9, 0xb0}}
	return a, nil
}

var _topicRegexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x8b\x23\x37\x10\xc5\xef\xfa\x14\x95\x81\x10\xdb\x8c\xdb\xe4\x3a\x30\x87\x21\x64\x61\x0f\x81\xb0\x5e\xd8\x43\x08\x74\x59\x5d\x56\x17\x96\x4a\x8d\xfe\x38\x93\x84\xfd\xee\xa1\x24\x7b\x3c\xde\x3d\xe6\x66\x4b\xaa\x57\xaf\x7e\xaf\xda\x6c\xb7\x5b\xb3\xd9\x6c\x3e\x91\xab\x1e\x13\xfc\xfa\xba\x24\xca\x99\xa3\xe4\xcd\x66\x63\xcc\x8b\xb5\x31\x4d\x2c\x0e\x4a\x84\x32\x13\xfc\x31\x45\x5b\x03\x49\xc1\xc2\x51\x20\x1e\xdb\x69\x22\x47\xaf\x0b\x2c\x68\x4f\xe8\xe8\xcf\xd5\x5c\xca\x92\x9f\x76\x3b\x17\x3d\x8a\x1b\x62\x72\xbb\xe5\xe4\x76\xfd\xd9\x6e\x0d\x2e\xfe\x94\x81\xc3\xe2\xe9\x26\xc5\x19\x8c\xab\x98\x50\x0a\xd1\xa4\xfd\x1e\x52\x15\x60\x81\xc2\x81\xc0\xb3\x10\xa6\xf6\x77\x26\xc8\xfc\x0f\x5d\x9b\xb3\x2c\xb5\x3c\x0c\xc6\x7c\x8e\x80\xd6\xc6\xb0\x78\xce\x33\x94\x99\x73\x6f\x74\xef\x0e\x66\xcc\x10\x85\xe0\xc0\x0e\x26\x3e\x1e\x29\x91\x58\xd2\x86\x35\xeb\xa4\xe9\xc2\x82\x6e\x2c\xb4\x6d\x40\xf9\x1b\x62\x99\x29\x81\x59\x52\x74\x09\x43\xd0\xe7\x3a\x61\x45\x47\xf9\xa9\x3b\xa3\x05\xd3\x1b\x9c\x51\xed\xb0\x6f\xff\x47\x40\x99\x60\xac\x19\x1d\x8d\x83\x31\x9b\xcd\x2f\xb7\x4b\x85\xfd\x65\x26\x81\x5e\xa0\xc2\x08\x63\x56\x36\x76\xec\x13\x00\x17\x85\x84\xd3\x99\x2d\x1e\xfc\xc5\x31\xc1\xd8\xe7\x1b\x7e\xab\xb9\x74\x45\xea\xad\x42\x3c\x53\xf3\xf4\xce\x84\x16\x99\xf1\x8a\xc2\xd3\x99\xfc\x38\xc0\x9e\x95\xc0\x78\xa7\xb0\xa0\xb0\xcd\xc0\xef\x12\xd6\xf6\x2c\x67\xf4\x3c\x75\xbc\x8a\x12\xa5\x43\xc1\xe9\x8c\x52\xd0\xd1\x13\xbc\xc0\xa4\xc2\x71\x51\x56\x7f\xb1\xf7\xe0\xa8\xc0\x91\x68\x3a\xa0\x3d\x41\x14\x40\x79\x13\xea\xca\x98\x21\x47\xbd\xc8\xa0\x10\x0b\xa6\x92\x41\x5b\xe0\xb2\x78\xb6\xcd\xfb\x00\x9f\xf5\x24\xcf\xb1\x7a\xad\x9b\xaa\x25\x30\xcd\x1d\xe7\x93\xe2\x46\xe8\xc4\xe0\x50\xcb\xfb\x06\xdf\xe5\x19\xf0\xa4\x88\x95\xa8\x94\x08\x4b\x8a\x53\xb5\x57\x3e\x08\x81\x85\x43\x0d\x83\x31\xe3\x38\x9a\x33\x26\x58\x19\x00\x80\x1c\x03\x7d\x6a\x7e\x9f\xe1\x7b\xea\xab\x51\xef\xdb\xf9\xb8\x36\x6b\x63\x8e\x55\x2c\xec\x63\xa0\x0f\x55\xec\x2a\x43\x2e\x89\xc5\xad\xe1\xdf\x26\x96\x28\x57\x5f\xe0\xe9\xf9\x26\x3b\x7c\x60\x99\x5e\xbc\xdf\xb7\x87\xab\xfc\x08\xdb\x9f\xd7\xed\xf1\x30\x0c\xe6\x6b\x73\x63\x3e\x7e\x93\x88\xc4\x72\x1d\x9b\xf5\x97\xf2\x0e\x78\xa2\x0c\x99\x24\xb7\x35\xb9\xb0\xd2\x32\xa9\xe1\x40\x49\x61\x25\xba\xed\xda\xdd\xd4\xf0\x51\x7a\xbc\xc6\x62\xdf\xaf\x57\x9d\xf4\x6d\x33\x38\xc3\x81\x4a\xa1\x04\xb9\x72\xa1\x49\x43\xe3\x02\x53\xa4\x6e\xa6\x6d\x8e\xa6\x9c\xaa\xb4\x6f\x57\xd3\x48\x54\x6a\x12\x5d\x17\xa0\x94\x62\xba\x5f\x2c\x73\xdb\xac\x0b\xf4\x6f\xd8\x3d\x82\x7e\x56\xe1\x0d\x61\xd7\xb8\x82\x74\xf4\xba\x2f\x49\x51\x1e\x43\x19\xf6\x4b\x62\x29\xc7\xd5\x43\xbb\xf8\xc2\x65\xfe\x5d\x6b\x7f\xcc\x0f\x17\x95\xf5\x7d\x98\x8f\xaa\xa6\xc5\x97\x48\xaf\x71\x5e\x75\xfb\x73\x3e\xb6\x67\x3f\x3c\x83\xb0\xbf\x74\xee\xdd\x75\x30\xbd\x6b\x47\x5f\xcd\xff\x0a\x77\xbb\xdd\xfe\x17\x00\x00\xff\xff\x0f\x14\xb0\x26\x94\x05\x00\x00")

func topicRegexMdBytes() ([]byte, error) {
	return bindataRead(
		_topicRegexMd,
		"topic/regex.md",
	)
}

func topicRegexMd() (*asset, error) {
	bytes, err := topicRegexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/regex.md", size: 1428, mode: os.FileMode(420), modTime: time.Unix(1540126605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x65, 0x27, 0x6c, 0x15, 0xa4, 0xd8, 0xf4, 0xcf, 0xfd, 0x84, 0xc2, 0xc5, 0xd7, 0xd9, 0xf3, 0x64, 0xd4, 0x77, 0x98, 0xe, 0x3c, 0xd2, 0x6b, 0x8e, 0xb9, 0xbc, 0xec, 0xc6, 0x97, 0x65, 0x67}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"response/comment.md": responseCommentMd,

	"response/greeting.md": responseGreetingMd,

	"response/improvement.md": responseImprovementMd,

	"response/newcomer_greeting.md": responseNewcomer_greetingMd,

	"response/praise.md": responsePraiseMd,

	"response/questions.md": responseQuestionsMd,

	"response/todo.md": responseTodoMd,

	"tools/not_formatted.md": toolsNot_formattedMd,

	"tools/not_linted.md": toolsNot_lintedMd,

	"tools/pass_tests.md": toolsPass_testsMd,

	"topic/benchmarking.md": topicBenchmarkingMd,

	"topic/pprof-allocations.md": topicPprofAllocationsMd,

	"topic/regex.md": topicRegexMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"response": &bintree{nil, map[string]*bintree{
		"comment.md":           &bintree{responseCommentMd, map[string]*bintree{}},
		"greeting.md":          &bintree{responseGreetingMd, map[string]*bintree{}},
		"improvement.md":       &bintree{responseImprovementMd, map[string]*bintree{}},
		"newcomer_greeting.md": &bintree{responseNewcomer_greetingMd, map[string]*bintree{}},
		"praise.md":            &bintree{responsePraiseMd, map[string]*bintree{}},
		"questions.md":         &bintree{responseQuestionsMd, map[string]*bintree{}},
		"todo.md":              &bintree{responseTodoMd, map[string]*bintree{}},
	}},
	"tools": &bintree{nil, map[string]*bintree{
		"not_formatted.md": &bintree{toolsNot_formattedMd, map[string]*bintree{}},
		"not_linted.md":    &bintree{toolsNot_lintedMd, map[string]*bintree{}},
		"pass_tests.md":    &bintree{toolsPass_testsMd, map[string]*bintree{}},
	}},
	"topic": &bintree{nil, map[string]*bintree{
		"benchmarking.md":      &bintree{topicBenchmarkingMd, map[string]*bintree{}},
		"pprof-allocations.md": &bintree{topicPprofAllocationsMd, map[string]*bintree{}},
		"regex.md":             &bintree{topicRegexMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
